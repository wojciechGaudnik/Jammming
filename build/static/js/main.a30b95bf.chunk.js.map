{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/PlayList.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","console","log","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","defaultValue","playListTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlayList","trackUris","userId","method","body","JSON","stringify","playListId","uris","App","playListName","updatePlayListName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a30b95bf.chunk.js","sourcesContent":["const clientId = '18ca912fabfd449ab6372a113c8151be';\nconst redirectUri = 'http://wojciech-gaudnik.surge.sh/';\nlet accessToken;\n\nexport const Spotify = {\n    getAccessToken(){\n        if(accessToken)\n            return accessToken;\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1]\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            console.log(accessUrl + \" <----\");\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        console.log(\"asdfasdf\");\n        return fetch(\n            `https://api.spotify.com/v1/search?type=track&q=${term}`,\n            {headers: {Authorization: `Bearer ${accessToken}`}\n            }).then(response => {\n                return response.json();\n            }).then(jsonResponse => {\n                if(!jsonResponse.tracks){\n                    return [];\n                }\n            console.log(jsonResponse);\n                return jsonResponse.tracks.items.map(track => ({\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                }))\n        });\n    },\n\n    savePlayList(name, trackUris) {\n        if(!name || !trackUris) return;\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}`};\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n                {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: name})\n                }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playListId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\n                    {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify({ uris: trackUris})\n                    })\n            })\n        })\n    }\n\n};","import React from 'react';\nimport './SearchBar.css';\n\nexport class SearchBar extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            term: ''\n        };\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search(){\n        this.props.onSearch(this.state.term);\n    }\n\n    handleTermChange(event) {\n        console.log(\"SearchBar  test\");\n        this.setState({term: event.target.value})\n    }\n    render() {\n        return(\n            <div className=\"SearchBar\">\n                <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\"/>\n                <button onClick={this.search} className=\"SearchButton\">SEARCH</button>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport './Track.css';\n\nexport class Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n\n\n    renderAction(){\n        if (this.props.isRemoval){\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        }\n        return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\n    }\n\n    addTrack(){\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack(){\n        this.props.onRemove(this.props.track);\n    }\n\n    render() {\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport './TrackList.css';\nimport {Track} from \"../Track/Track\";\n\nexport class TrackList extends React.Component{\n    render() {\n        return(\n            <div className=\"TrackList\">\n                {\n                    this.props.tracks.map(track => {\n                        return <Track track={track}\n                                      key={track.id}\n                        onAdd={this.props.onAdd}\n                        onRemove={this.props.onRemove}\n                        isRemoval={this.props.isRemoval}/>\n                    })\n                }\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport './SearchResults.css';\nimport {TrackList} from '../TrackList/TrackList'\nexport class SearchResults extends React.Component {\n    render() {\n        return(\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults}\n                            onAdd={this.props.onAdd}\n                            isRemoval={false}/>\n            </div>\n        )\n    }\n\n}","import React from \"react\";\nimport './Playlist.css';\nimport {TrackList} from \"../TrackList/TrackList\";\n\nexport class PlayList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(event) {\n        this.props.onNameChange(event.target.value);\n    }\n\n    render() {\n        return(\n            <div className=\"Playlist\">\n                <input defaultValue={\"New Playlist\"}\n                        onChange={this.handleNameChange}/>\n                <TrackList tracks={this.props.playListTracks}\n                            onRemove={this.props.onRemove}\n                            isRemoval={true}/>\n                <button className=\"Playlist-save\"onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n\n}\n","import React from 'react';\nimport './App.css';\nimport {SearchBar} from \"../SearchBar/SearchBar\";\nimport {SearchResults} from \"../SearchResults/SearchResults\";\nimport {PlayList} from \"../Playlist/PlayList\";\n\nimport {Spotify} from \"../../util/Spotify\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchResults: [\n                // {name: 'name1', artist: 'artist1', album: 'album1', id: 1},\n                // {name: 'name2', artist: 'artist2', album: 'album2', id: 2},\n                // {name: 'name3', artist: 'artist3', album: 'album3', id: 3}\n            ],\n            playListName: 'My Play List',\n            playListTracks: [\n                // {name: 'playListName1', artist: 'playListArtist1', album: 'playListAlbum1', id: 4},\n                // {name: 'playListName2', artist: 'playListArtist2', album: 'playListAlbum2', id: 5},\n                // {name: 'playListName3', artist: 'playListArtist3', album: 'playListAlbum3', id: 6},\n            ]\n        };\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n        this.updatePlayListName = this.updatePlayListName.bind(this);\n        this.savePlayList = this.savePlayList.bind(this);\n        this.search = this.search.bind(this);\n    }\n\n    addTrack(track){\n        let tracks = this.state.playListTracks;\n        if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n            return;\n        }\n        tracks.push(track);\n        this.setState({playListTracks: tracks})\n    }\n\n    removeTrack(track){\n        let tracks = this.state.playListTracks;\n        tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n        this.setState({playListTracks: tracks});\n\n    }\n\n    updatePlayListName(name){\n        console.log(name.value + \" <<\");\n        this.setState({playListName: name})\n    }\n\n    savePlayList(){\n        const trackUris = this.state.playListTracks.map(track => track.uri);\n        Spotify.savePlayList(this.state.playListName, trackUris).then(() => {this.setState({\n                playListName: 'New PlayList',\n                playListTracks: []\n            })\n        })\n    }\n\n    search(term){\n        console.log(\"aftert click\");\n        Spotify.search(term).then(searchResults => {\n            this.setState({searchResults: searchResults})\n        })\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n                <div className=\"App\">\n                    <SearchBar onSearch={this.search}/>\n                    <div className=\"App-playlist\">\n                        <SearchResults searchResults={this.state.searchResults}\n                        onAdd={this.addTrack}/>\n                        <PlayList\n                            playListName={this.state.playListName}\n                            playListTracks={this.state.playListTracks}\n                            onRemove={this.removeTrack}\n                            onNameChange={this.updatePlayListName}\n                            onSave={this.savePlayList}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}